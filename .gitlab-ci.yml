stages:
    - build-phase-1
    - build-phase-2
    - deploy-application-recette
    - build-docker-configuration-production
    - deploy-application-production
    - dynamic-application-security-testing

variables:
    LAUNCH_CYPRESS_TESTS: "true"

cache: &global_cache
  key: ${$CI_JOB_STAGE-$CI_COMMIT_REF_SLUG}
  paths:
    - .npm/
    - cache/Cypress
    - node_modules/
    - .sonar/cache

build_frontend_application :
    stage: build-phase-1
    image:
      name: registry.beta.pole-emploi.fr/customize-docker-images/angular-ng
      entrypoint: [""]
    script:
      #lancement du build de l'application
      - npm run build:prod
    rules:
    - if: '$CI_COMMIT_BRANCH == "master"'
      changes:
        - src/**/*
    artifacts:
      paths:
        - ./dist
    cache:
      <<: *global_cache

cypress-e2e:
    stage: build-phase-1
    #image basée sur l'image officielle cypress/base:10
    image:
      name: registry.beta.pole-emploi.fr/customize-docker-images/cypress
    script:
    #valoriser les propriétés des fichiers d'environnement avec les variables d'environnement définies dans Gitlab CI
    - p2 -t cypress/ci/environment.cypress.local.ts.j2 -o cypress/environment.ts
    - p2 -t cypress/ci/environment.local.ts.j2 -o src/environments/environment.local.ts
    - echo "127.0.0.1	estime-e2e.pole-emploi.fr" >> /etc/hosts
    #installation des dépendances du projet
    - npm ci
    #lancement de l'application via le serveur local
    - npm run start:ngx &
    #attente du lancement de l'application
    - wait-on http://estime-e2e.pole-emploi.fr/
    #lancement des tests cypress
    - npm run cy:run
    rules:
    - if: '$CI_COMMIT_BRANCH == "master" && $LAUNCH_CYPRESS_TESTS == "true"'
      changes:
        - src/**/*
      when: on_success
    - if: '$CI_COMMIT_BRANCH != "master" && $LAUNCH_CYPRESS_TESTS == "true"'
      changes:
        - src/**/*
      when: manual
    artifacts:
      when: always
      paths:
        - coverage
        - cypress/screenshots
        - dist/cypress/integration/feature.obtenir-sa-simulation
      expire_in: 1 day
    cache:
      <<: *global_cache

build-docker-image-recette:
    stage: build-phase-2
    image:
      name: gcr.io/kaniko-project/executor:debug
      entrypoint: [""]
    script:
      # build estime-frontend docker image and push it in containers registry
      - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
      - /kaniko/executor --context $CI_PROJECT_DIR --dockerfile $CI_PROJECT_DIR/docker/docker-image/Dockerfile --destination $CI_REGISTRY_IMAGE:release-candidate
    rules:
    - if: '$CI_COMMIT_BRANCH == "master"'
      changes:
        - src/**/*
    dependencies:
    - build_frontend_application

generate-docker-stack-recette:
  stage: build-phase-2
  image:
    # https://git.beta.pole-emploi.fr/customize-docker-images/p2cli.git
    name: registry.beta.pole-emploi.fr/customize-docker-images/p2cli
  script:
    - cd docker
    - mkdir recette
    - p2 -t estime-frontend-recette-stack.yml.j2 -o ./recette/estime-frontend-stack.yml
  artifacts:
    paths:
      - ./docker/recette
    expire_in: 1 week
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'
      changes:
        - src/**/*

sonar_quality_analyse :
    stage: build-phase-2
    image:
      name: sonarsource/sonar-scanner-cli:latest
    variables:
      SONAR_TOKEN: "${SONAR_BETA_TOKEN}"
      SONAR_HOST_URL: "${SONAR_BETA_PE_HOST_URL}"
      SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar" # Defines the location of the analysis task cache
      GIT_DEPTH: 0 # Tells git to fetch all the branches of the project, required by the analysis task
    script:
    - npm install typescript
    - sonar-scanner -Dsonar.qualitygate.wait=true
    rules:
    - if: '$CI_COMMIT_BRANCH == "master"'
      changes:
        - src/**/*
    dependencies:
    - cypress-e2e
    allow_failure: true
    cache:
      <<: *global_cache

deploy_application_recette:
    stage: deploy-application-recette
    before_script:
      - apt-get update -qq
      - apt-get install -y -qq openssh-client rsync iputils-ping
      # add target server in known hosts
      - mkdir ~/.ssh
      - echo "$R7_SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
      - chmod 644 ~/.ssh/known_hosts
      # add SSH_PRIVATE_KEY in agent store
      - eval $(ssh-agent -s)
      - ssh-add <(echo "$R7_SSH_PRIVATE_KEY")
      - mkdir -p ~/.ssh
    script:
      # rsync to activate if needed to update estime-frontend-stack.yml
      - rsync -avz --no-perms --no-owner --no-group -e 'ssh'  $CI_PROJECT_DIR/docker/scripts/deploy.sh $CI_PROJECT_DIR/docker/recette/estime-frontend-stack.yml $HOST_SERVER_USER@$R7_HOST_SERVER_IP:/home/docker/estime-frontend
      - rsync -avz --no-perms --no-owner --no-group -e 'ssh'  $CI_PROJECT_DIR/docker/nginx-conf/default.conf $HOST_SERVER_USER@$R7_HOST_SERVER_IP:/home/docker/estime-frontend/etc/nginx/conf.d
      # exec deploy.sh to deploy docker stack estime-frontend or update estime-frontend image service
      - ssh $HOST_SERVER_USER@$R7_HOST_SERVER_IP "cd /home/docker/estime-frontend && ./deploy.sh $CI_REGISTRY $CI_REGISTRY_USER $CI_REGISTRY_PASSWORD"
    when: manual

build-docker-image-production:
    stage: build-docker-configuration-production
    image:
      name: gcr.io/kaniko-project/executor:debug
      entrypoint: [""]
    script:
      # copy robots policy for production
      - cp $CI_PROJECT_DIR/src/robots.prod.txt $CI_PROJECT_DIR/dist/estime/robots.txt
      # build estime-frontend docker image and push it in containers registry
      - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
      - /kaniko/executor --context $CI_PROJECT_DIR --dockerfile $CI_PROJECT_DIR/docker/docker-image/Dockerfile --destination $CI_REGISTRY_IMAGE:release
    when: manual

generate-docker-stack-production:
  stage: build-docker-configuration-production
  image:
    # https://git.beta.pole-emploi.fr/customize-docker-images/p2cli.git
    name: registry.beta.pole-emploi.fr/customize-docker-images/p2cli
  script:
    - cd docker
    - mkdir production
    - p2 -t estime-frontend-production-stack.yml.j2 -o ./production/estime-frontend-stack.yml
  artifacts:
    paths:
      - ./docker/production
  when: manual

deploy_application_production:
    stage: deploy-application-production
    before_script:
      - apt-get update -qq
      - apt-get install -y -qq openssh-client rsync iputils-ping
      # add target server in known hosts
      - mkdir ~/.ssh
      - echo "$PROD_SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
      - chmod 644 ~/.ssh/known_hosts
      # add SSH_PRIVATE_KEY in agent store
      - eval $(ssh-agent -s)
      - ssh-add <(echo "$PROD_SSH_PRIVATE_KEY")
      - mkdir -p ~/.ssh
    script:
      # rsync config files on server
      - rsync -avz --no-perms --no-owner --no-group -e 'ssh'  $CI_PROJECT_DIR/docker/scripts/deploy.sh $CI_PROJECT_DIR/docker/production/estime-frontend-stack.yml $HOST_SERVER_USER@$PROD_HOST_SERVER_IP:/home/docker/estime-frontend
      - rsync -avz --no-perms --no-owner --no-group -e 'ssh'  $CI_PROJECT_DIR/docker/nginx-conf/default.conf $HOST_SERVER_USER@$PROD_HOST_SERVER_IP:/home/docker/estime-frontend/etc/nginx/conf.d
      # exec deploy.sh to deploy docker stack estime-frontend or update estime-frontend image service
      - ssh $HOST_SERVER_USER@$PROD_HOST_SERVER_IP "cd /home/docker/estime-frontend && ./deploy.sh $CI_REGISTRY $CI_REGISTRY_USER $CI_REGISTRY_PASSWORD"
    when: manual
